Here are the most useful Git commands that professional developers frequently use:

Basic Git Commands
git init â€“ Initializes a new Git repository.

git clone <repo_url> â€“ Clones a remote repository to your local machine.

git status â€“ Shows the current status of the working directory and staged files.

git add <file> â€“ Stages a file for the next commit.

git commit -m "message" â€“ Commits the staged changes with a message.

git log â€“ Shows the commit history.

Branching and Merging
git branch â€“ Lists all branches.

git branch <branch_name> â€“ Creates a new branch.

git checkout <branch_name> â€“ Switches to another branch.

git switch <branch_name> â€“ Another way to switch branches (recommended for newer Git versions).

git merge <branch_name> â€“ Merges a branch into the current branch.

git rebase <branch_name> â€“ Reapplies commits from one branch on top of another.

Remote Repositories
git remote -v â€“ Shows the remote repository URL.

git fetch â€“ Retrieves changes from the remote repository without merging.

git pull â€“ Fetches and merges changes from the remote repository.

git push origin <branch_name> â€“ Pushes local commits to the remote repository.

Undoing Changes
git reset <file> â€“ Unstages a file before committing.

git reset --hard <commit_hash> â€“ Resets the working directory and commits to a specific commit (use cautiously).

git checkout -- <file> â€“ Discards local changes in a file.

git revert <commit_hash> â€“ Reverts a commit by creating a new commit.

Stashing and Cleaning
git stash â€“ Temporarily saves changes without committing.

git stash pop â€“ Applies the last stashed changes and removes them from the stash.

git stash list â€“ Lists all stashes.

git clean -f â€“ Removes untracked files from the working directory.

Advanced & Useful Commands
git cherry-pick <commit_hash> â€“ Applies a specific commit from another branch.

git bisect start â€“ Starts a binary search to find the commit that introduced a bug.

git reflog â€“ Shows a history of all references, useful for recovering lost commits.

git blame <file> â€“ Shows who modified each line in a file.

git tag <tag_name> â€“ Creates a tag for a specific commit.

git diff â€“ Shows changes between commits, branches, or the working directory.

Would you like examples or explanations for any of these? ðŸš€
